#! its the code for an item that give the player time, and if you run out of time you get banned off this server!

options:
    time: 10800 seconds #TIME THE PLAYER GETS WHEN JOINING THE SERVER FOR THE FIRST TIME
    prefix: &6&lTIMER&f
 
on load:
    registerTimeItems(1, clock, "&6&lMagical Clock", 108000 seconds) # USE SAME SYNTAX TO CREATE MORE ITEMS THAT WILL ADD TIME.
  	register new shaped recipe for {timer::item::1} using diamond, diamond, diamond, diamond, clock, diamond, diamond, diamond and diamond with id "1"

command /clockitems:
	trigger:
		give player {timer::item::*}
 
on join:
    if {timer::%player's uuid%} is not set:
        set {timer::%player's uuid%} to {@time}
    while player is online:
        remove 1 second from {timer::%player's uuid%}
        send action bar "&fTime Left: &a%formatTime({timer::%player's uuid%})%" to player
        if {timer::%player's uuid%} = 0:
            make console execute "tempban %player% 3h You ran out of time."
        wait 1 second
 
on right click:
    loop {timer::name::*}:
        if name of player's tool contains loop-value:
            set {_lore} to uncolored line 3 of lore of player's tool
            set {_lore} to "%{_lore}%"
            replace all " " and "Tier:" with "" in {_lore} 
            add {timer::time::%{_lore} parsed as number%} to {timer::%player's uuid%}
            send "{@prefix} You claimed &a%{timer::time::%{_lore} parsed as number%}%" to player
            set player's tool to air
 
 
function registerTimeItems(id: integer, item: itemtype, name: text, time: timespan):
    set {timer::item::%{_id}%} to {_item} named {_name} with lore "&8%smallcaps("timer item")%" and "&f" and "&fTier: %{_id}%" and "&fTime: &a%formatTime({_time})%" and "&f" and "&7%smallcaps("click to claim")%"
    set {timer::time::%{_id}%} to {_time}
    set {timer::name::%{_id}%} to {_name}
 
 
function formatTime(time: timespan) :: string:
    set {_time} to "%{_time}%"
    set {_timespan::*} to {_time} parsed as "%number% %string%[s][ and %number% %string%[s]]"
    set {_first} to "%{_timespan::1}%%first character of {_timespan::2}%"
    set {_second} to "%{_timespan::3}%%first character of {_timespan::4}%"
    return ("%{_first}% %{_second}%" if {_timespan::3} is set, else "%{_first}%")
 
function smallcaps(text: text) :: text:
	loop split "ᴀ,a|ʙ,b|ᴄ,c|ᴅ,d|ᴇ,e|ꜰ,f|ɢ,g|ʜ,h|ɪ,i|ǫ,q|ᴊ,j|ᴋ,k|ʟ,l|ᴍ,m|ɴ,n|ᴏ,o|ᴘ,p|Q,q|ʀ,r|ꜱ,s|ᴛ,t|ᴜ,u|ᴠ,v|ᴡ,w|x,x|ʏ,y|ᴢ,z" at "|":
		set {_a::*} to split loop-value at ","
		replace all {_a::2} with {_a::1} in {_text}
	return {_text}
