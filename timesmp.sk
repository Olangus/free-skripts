#! its the code for an item that give the player time, and if you run out of time you get banned off this server!

options:
    time: 10800 seconds #TIME THE PLAYER GETS WHEN JOINING THE SERVER FOR THE FIRST TIME
    prefix: &6&lTIMER&f
 
on load:
    registerTimeItems(1, clock, "&6&lMagical Clock", 108000 seconds) # USE SAME SYNTAX TO CREATE MORE ITEMS THAT WILL ADD TIME.

on load:
  register new shaped recipe for {timer::item::1} using diamond, diamond, diamond, diamond, clock, diamond, diamond, diamond and diamond with id "1"

command /clockitems:
	trigger:
		give player {timer::item::*}
 
on join:
    if {timer::%player's uuid%} is not set:
        set {timer::%player's uuid%} to {@time}
    while player is online:
        remove 1 second from {timer::%player's uuid%}
        send action bar "&fTime Left: &a%formatTime({timer::%player's uuid%})%" to player
        if {timer::%player's uuid%} = 0:
            make console execute "tempban %player% 3h You ran out of time."
        wait 1 second
 
on right click:
    loop {timer::name::*}:
        if name of player's tool contains loop-value:
            set {_lore} to uncolored line 3 of lore of player's tool
            set {_lore} to "%{_lore}%"
            replace all " " and "Tier:" with "" in {_lore} 
            add {timer::time::%{_lore} parsed as number%} to {timer::%player's uuid%}
            send "{@prefix} You claimed &a%{timer::time::%{_lore} parsed as number%}%" to player
            set player's tool to air
 
 
function registerTimeItems(id: integer, item: itemtype, name: text, time: timespan):
    set {timer::item::%{_id}%} to {_item} named {_name} with lore "&8%smallcaps("timer item")%" and "&f" and "&fTier: %{_id}%" and "&fTime: &a%formatTime({_time})%" and "&f" and "&7%smallcaps("click to claim")%"
    set {timer::time::%{_id}%} to {_time}
    set {timer::name::%{_id}%} to {_name}
 
 
function formatTime(time: timespan) :: string:
    set {_time} to "%{_time}%"
    set {_timespan::*} to {_time} parsed as "%number% %string%[s][ and %number% %string%[s]]"
    set {_first} to "%{_timespan::1}%%first character of {_timespan::2}%"
    set {_second} to "%{_timespan::3}%%first character of {_timespan::4}%"
    return ("%{_first}% %{_second}%" if {_timespan::3} is set, else "%{_first}%")
 
function smallcaps(t: text) :: text:
    replace all "a" with "ᴀ" in {_t} if {_t} contains "a"
    replace all "b" with "ʙ" in {_t} if {_t} contains "b"
    replace all "c" with "ᴄ" in {_t} if {_t} contains "c"
    replace all "d" with "ᴅ" in {_t} if {_t} contains "d"
    replace all "e" with "ᴇ" in {_t} if {_t} contains "e"
    replace all "f" with "ғ" in {_t} if {_t} contains "f"
    replace all "g" with "ɢ" in {_t} if {_t} contains "g"
    replace all "h" with "ʜ" in {_t} if {_t} contains "h"
    replace all "i" with "ɪ" in {_t} if {_t} contains "i"
    replace all "j" with "ᴊ" in {_t} if {_t} contains "j"
    replace all "k" with "ᴋ" in {_t} if {_t} contains "k"
    replace all "l" with "ʟ" in {_t} if {_t} contains "l"
    replace all "m" with "ᴍ" in {_t} if {_t} contains "m"
    replace all "n" with "ɴ" in {_t} if {_t} contains "n"
    replace all "o" with "ᴏ" in {_t} if {_t} contains "o"
    replace all "p" with "ᴘ" in {_t} if {_t} contains "p"
    replace all "q" with "ǫ" in {_t} if {_t} contains "q"
    replace all "r" with "ʀ" in {_t} if {_t} contains "r"
    replace all "s" with "ꜱ" in {_t} if {_t} contains "s"
    replace all "t" with "ᴛ" in {_t} if {_t} contains "t"
    replace all "u" with "ᴜ" in {_t} if {_t} contains "u"
    replace all "v" with "ᴠ" in {_t} if {_t} contains "v"
    replace all "w" with "ᴡ" in {_t} if {_t} contains "q"
    replace all "x" with "x" in {_t} if {_t} contains "x"
    replace all "y" with "ʏ" in {_t} if {_t} contains "y" 
    replace all "z" with "ᴢ" in {_t} if {_t} contains "z"
    return {_t}
